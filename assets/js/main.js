"use strict";!function(){angular.module("nsApp",["nsApp.core","nsApp.templates","nsApp.layout","nsApp.overlay","nsApp.shared","nsApp.users","nsApp.spots","nsApp.splash","nsApp.static"])}(),function(){angular.module("nsApp.core",["ngResource","ngMessages","ngAnimate","ui.router","ui.bootstrap","ng-token-auth","LocalStorageModule","ngGeolocation","ngAutocomplete","toaster","angular-ladda","ngFileUpload","ngImgCrop","angular-loading-bar","checklist-model","angular-confirm","rzModule","angularSpinner"])}(),function(){angular.module("nsApp.shared",[])}(),function(){angular.module("nsApp.static",[])}(),function(){angular.module("nsApp.layout",[])}(),function(){angular.module("nsApp.splash",[])}(),function(){angular.module("nsApp.overlay",[])}(),function(){angular.module("nsApp.spots",[])}(),function(){angular.module("nsApp.users",[])}(),function(){angular.module("nsApp.core").constant("BASE_API_URL","http://localhost:3000").constant("MAPBOX_ID","rowlandrudolf.f7fe7b43").constant("MAPBOX_ACCESS_TOKEN","pk.eyJ1Ijoicm93bGFuZHJ1ZG9sZiIsImEiOiJjaWdpd3pxbGcwMDBmdWpsemd4eDNhY2FxIn0.FieZuFlRggvyYds8VykVwA")}(),function(){function e(e){e.otherwise("/")}angular.module("nsApp.core").config(e),e.$inject=["$urlRouterProvider"]}(),function(){function e(e,t){function n(){return t.get(o,{headers:{"content-type":"application/json"},cache:!0}).then(function(e){return r.categories=e.data,r.categories})}var o=e+"/categories",r={categories:[],index:n};return r.index(),r}angular.module("nsApp.shared").factory("Category",e),e.$inject=["BASE_API_URL","$http"]}(),function(){function e(){function e(e){for(var t=[],n=e[0],o=0,r=-1,i=e.length;i>o;o++)n+1!=e[o]?(t.push([e[o]]),r++):t[r].push(e[o]),n=e[o];return t}var t={1:"Mon",2:"Tue",3:"Wed",4:"Thu",5:"Fri",6:"Sat",7:"Sun"};return function(n){if(angular.isArray(n)&&n.length){var o=n.sort().map(Number),r=[];return e(o).map(function(e){if(e.length<=2)r.push(e.map(function(e){return t[e]}).join(", "));else{var n=e.shift(),o=e.pop();r.push(t[n]+" - "+t[o])}}),r.join(", ")}}}angular.module("nsApp.shared").filter("daySpan",e)}(),function(){function e(e,t){function n(){return t.get(o,{headers:{"content-type":"application/json"},cache:!0}).then(function(e){return r.features=e.data,r.features})}var o=e+"/features",r={features:[],index:n};return r.index(),r}angular.module("nsApp.shared").factory("Feature",e),e.$inject=["BASE_API_URL","$http"]}(),function(){function e(e,t){var n={eat:[],drink:[],attend:[],features:[],q:"",price:0,order:"distance",save:function(){t.set("filterParams",n)}},o=t.get("filterParams");return null!==o&&(n.eat=o.eat,n.drink=o.drink,n.attend=o.attend,n.features=o.features,n.price=o.price,n.order=o.order,n.q=o.q),n}angular.module("nsApp.shared").factory("filterParams",e),e.$inject=["$rootScope","localStorageService"]}(),function(){function e(){return function(e){return e.replace(/(http:\/\/www.|https:\/\/www.)/,"")}}angular.module("nsApp.shared").filter("linkTag",e)}(),function(){function e(e,t,n){var o=new Date,r=o.toTimeString(),i=0===o.getDay()?7:o.getDay(),s=i-1,a=e.map(Number),c=new Date(t).toTimeString(),l=new Date(n).toTimeString();if(a.indexOf(i)>-1){if(c==l)return!0;if(l>c)return r>=c&&l>=r;if(c>l)return r>=c?!0:a.indexOf(s)>-1&&(r>=c||l>=r)}else if(a.indexOf(s)>-1&&c>l&&l>=r)return!0;return!1}angular.module("nsApp.shared").value("openNow",e)}(),function(){function e(e){e.state("business",{url:"/business",templateUrl:"static/business.html"}).state("terms",{url:"/terms-and-conditions",templateUrl:"static/terms-and-conditions.html"})}angular.module("nsApp.spots").config(e),e.$inject=["$stateProvider"]}(),function(){function e(e,t,n,o){function r(){t.open("components/overlay/search/searchOverlay.html").then(function(e){e.id?n.go(e.state,{id:e.id}):n.go(e.state)})}function i(){t.open("components/overlay/nav/navOverlay.html").then(function(e){e.id?n.go(e.state,{id:e.id}):n.go(e.state)})}var s=this;s.openNavOverlay=i,s.openSearchOverlay=r,s.filterParams=o}angular.module("nsApp.layout").controller("nav",e),e.$inject=["$rootScope","overlay","$state","filterParams"]}(),function(){function e(){return{require:"ngInclude",restrict:"A",link:function(e,t,n){t.replaceWith(t.children())}}}angular.module("nsApp.layout").directive("nsReplaceInclude",e)}(),function(){function e(){return{restrict:"E",replace:!0,templateUrl:"components/layout/nsTopbar.html",controller:"nav",controllerAs:"navCtrl",link:function(e,t,n){}}}angular.module("nsApp.layout").directive("nsTopbar",e)}(),function(){function e(e,t){function n(t,n,o){t.location=e}return{restrict:"A",link:n}}angular.module("nsApp.splash").directive("nsSplash",e),e.$inject=["LocationManager","$timeout"]}(),function(){function e(e,t){return{restrict:"A",scope:!0,link:function(t,n,o){function r(){t.showOverlay=null}t.showOverlay=null,t.dismiss=r,e.$on("overlay.open",function(e,n){t.showOverlay=n}),e.$on("overlay.close",function(e){t.showOverlay=null})}}}angular.module("nsApp.overlay").directive("nsOverlay",e),e.$inject=["$rootScope","overlay"]}(),function(){function e(e,t){function n(n){return i=t.defer(),e.$emit("overlay.open",n),i.promise}function o(t){return i?(e.$emit("overlay.close"),i.resolve(t)):void 0}function r(t){return i?(e.$emit("overlay.close"),i.reject(t)):void 0}var i=null;return{open:n,resolve:o,reject:r}}angular.module("nsApp.overlay").service("overlay",e),e.$inject=["$rootScope","$q"]}(),function(){function e(e,t){return t(e+"/spots/:id",{id:"@id"},{near:{method:"GET",url:e+"/spots/near",isArray:!0},userIndex:{method:"GET",url:e+"/spots/user_index",isArray:!0,cache:!0},favorites:{method:"GET",url:e+"/spots/favorites",isArray:!0},search:{method:"GET",url:e+"/spots/search",isArray:!0},update:{method:"PUT"}})}e.$inject=["BASE_API_URL","$resource"],angular.module("nsApp.spots").factory("Spot",e)}(),function(){function e(e,t,n){e.state("home",{url:"/",templateUrl:"components/spots/home/home.html",controller:"home",controllerAs:"vm"}).state("eat",{url:"/eat",controller:"search",controllerAs:"vm",templateUrl:"components/spots/search/search.html",resolve:{sort:function(){return"eat"}}}).state("drink",{url:"/drink",controller:"search",controllerAs:"vm",templateUrl:"components/spots/search/search.html",resolve:{sort:function(){return"drink"}}}).state("attend",{url:"/attend",controller:"searchVenues",controllerAs:"vm",templateUrl:"components/spots/search/searchVenues.html",resolve:{sort:function(){return"attend"}}}).state("favorites",{url:"/favorites",controller:"favorites",controllerAs:"vm",templateUrl:"components/spots/favorites/favorites.html",resolve:{auth:["$auth",function(e){return e.validateUser()}]}}).state("viewSpot",{url:"/spots/:id","abstract":!0,templateUrl:"components/spots/view/viewSpot.html",controller:"viewSpot",controllerAs:"vm",resolve:{spot:["Spot","$stateParams","LocationManager",function(e,t,n){return e.get({id:t.id}).$promise.then(function(t){return t.distance=n.distance(t.latitude,t.longitude),new e(t)})}]}}).state("viewSpot.about",{url:"",controller:"about",controllerAs:"aboutCtrl",templateUrl:"components/spots/about/about.html"}).state("viewSpot.specials",{url:"/specials",controller:"specials",controllerAs:"splsCtrl",templateUrl:"components/spots/specials/specials.html"}).state("viewSpot.menus",{url:"/menus",controller:"menus",controllerAs:"menusCtrl",templateUrl:"components/spots/menus/menus.html"}).state("viewSpot.events",{url:"/events",controller:"events",controllerAs:"eventsCtrl",templateUrl:"components/spots/events/events.html"}).state("edit",{url:"/update_spot","abstract":!0,controller:"editSpot",controllerAs:"vm",templateUrl:"components/spots/edit/edit.html",resolve:{auth:["$auth",function(e){return e.validateUser()}],spot:["spotService","$q","$timeout","$state",function(e,t,n,o){return e.spot?t.when(e.spot):(n(function(){o.go("home")}),t.reject())}]}}).state("edit.about",{url:"",controller:"editAbout",controllerAs:"aboutCtrl",templateUrl:"components/spots/about/editAbout.html"}).state("edit.contact",{url:"/contact",templateUrl:"components/spots/edit/contact.html"}).state("edit.specials",{url:"/specials",controller:"editSpecials",controllerAs:"splsCtrl",templateUrl:"components/spots/specials/editSpecials.html"}).state("edit.menus",{url:"/menu",controller:"editMenus",controllerAs:"menusCtrl",templateUrl:"components/spots/menus/editMenus.html"}).state("edit.events",{url:"/events",controller:"editEvents",controllerAs:"eventsCtrl",templateUrl:"components/spots/events/editEvents.html"}).state("newSpot",{url:"/new-spot",controller:"newSpot",controllerAs:"vm",templateUrl:"components/spots/new/newSpot.html",resolve:{auth:["$auth",function(e){return e.validateUser()}]}})}angular.module("nsApp.spots").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){function e(e,t,n,o,r,i,s,a){function c(){n.init().then(function(){return l()})}function l(){S.pending||(S.pending=!0,S.spots.length=0,t.near({location:n.search?[n.search.lat,n.search.lng].join(","):null,r:n.radius}).$promise.then(g)["catch"](h)["finally"](function(){S.pending=!1}))}function u(e){if(!S.pending){var n=o.defer();return t.save(e).$promise.then(function(e){s.get("$http").remove(a+"/spots/user_index"),i.pop("success","Spot Created!"),n.resolve(e)})["catch"](function(e){i.pop("error","Unable to Create nitespot"),n.reject(e)})["finally"](function(){S.pending=!1}),n.promise}}function p(){S.spot&&!S.pending&&(S.pending=!0,S.spot.$update().then(function(e){s.get("$http").remove(a+"/spots/user_index"),i.pop("success","Spot updated")})["catch"](function(e){i.pop("error","Unable to complete update.")})["finally"](function(){S.pending=!1}))}function d(){return S.spot&&!S.pending?(S.pending=!0,S.spot.$delete().then(function(e){s.get("$http").remove(a+"/spots/user_index"),i.pop("info","Spot permanently removed"),S.spot=null})["catch"](h)["finally"](function(){S.pending=!1})):void 0}function f(){if(!S.pending){var e;return S.pending=!0,t.userIndex().$promise.then(function(n){return e=n.map(function(e){return new t(e)})})["catch"](h)["finally"](function(){S.pending=!1})}}function m(){if(!S.pending){S.pending=!0,S.spots.length=0;var e;n.search&&(e={location:[n.search.lat,n.search.lng].join(",")}),t.favorites(e).$promise.then(g)["catch"](h)["finally"](function(){S.pending=!1})}}function v(e){if(!S.pending){S.pending=!0;var o=[];return t.search({q:e}).$promise.then(function(e){for(var t=0,r=e.length;r>t;t++)e[t].distance=n.distance(e[t].latitude,e[t].longitude),o.push(e[t]);return o})["catch"](h)["finally"](function(){S.pending=!1})}}function g(e){for(var t=0,o=e.length;o>t;t++)e[t].distance=n.distance(e[t].latitude,e[t].longitude),S.spots.push(e[t])}function h(e){return e}var S={init:c,pending:!1,spot:null,spots:[],near:l,favorites:m,userIndex:f,create:u,update:p,destroy:d,search:v};return e.$on("locationChanged",function(){S.near()}),S}angular.module("nsApp.spots").factory("spotService",e),e.$inject=["$rootScope","Spot","LocationManager","$q","filterParams","toaster","$cacheFactory","BASE_API_URL"]}(),function(){function e(e,t){e.configure({apiUrl:t,authProviderPaths:{facebook:"/auth/facebook"},omniauthWindowType:"newWindow",passwordResetSuccessUrl:"http://localhost:8000/#/users/password/reset"})}angular.module("nsApp.users").config(e),e.$inject=["$authProvider","BASE_API_URL"]}(),function(){function e(e,t,n,o,r,i){e.$on("auth:logout-success",function(){r.get("$http").remove(i+"/spots/user_index"),t.account=null,n.go("home"),o.pop("info","Goodbye!")}),e.$on("auth:login-success",function(){n.go("home")})}angular.module("nsApp.users").run(e),e.$inject=["$rootScope","userService","$state","toaster","$cacheFactory","BASE_API_URL"]}(),function(){function e(e){e.state("login",{url:"/users/sign_in",templateUrl:"components/users/login/loginUser.html",controller:"loginUser",controllerAs:"vm",resolve:{user:["$rootScope",function(e){return e.user.signedIn&&$state.go("home"),!0}]}}).state("newAccount",{url:"/users/sign_up",templateUrl:"components/users/account/newAccount.html",controller:"newAccount",controllerAs:"vm"}).state("editAccount",{url:"/account/edit",templateUrl:"components/users/account/editAccount.html",controller:"editAccount",controllerAs:"vm",resolve:{auth:["$auth",function(e){return e.validateUser()}]}}).state("requestPasswordReset",{url:"/users/password/new",templateUrl:"components/users/account/requestPasswordReset.html",controller:"requestPasswordReset",controllerAs:"vm"}).state("resetPassword",{url:"/users/password/reset",templateUrl:"app/users/account/resetpassword.html",controller:"resetPassword",controllerAs:"vm",resolve:{auth:["$auth",function(e){return e.validateUser()}]}})}angular.module("nsApp.users").config(e),e.$inject=["$stateProvider","$authProvider"]}(),function(){function e(e,t,n,o){function r(){return p.account=angular.copy(e.user),p.account}function i(){var e=n.defer();return t.submitLogin(p.account).then(function(n){t.validateUser(),o.pop("success","Welcome, "+n.first_name+"!"),e.resolve(n)})["catch"](function(t){o.pop("error","Invalid email or password."),p.account.password="",e.reject(t)}),e.promise}function s(){if(!p.pending){var e=n.defer();return p.pending=!0,t.submitRegistration(p.account).then(function(n){t.validateUser(),o.pop("success","Registration complete","Welcome to The Nitespot :)"),e.resolve(n)})["catch"](function(t){o.pop("error","Registration Error","Please review the form"),e.reject(t)})["finally"](function(e){p.pending=!1}),e.promise}}function a(){if(!p.pending){var e=n.defer();return p.pending=!0,t.updateAccount(p.account).then(function(t){o.pop("success","Account updated"),e.resolve(t)})["catch"](function(t){o.pop("error","Unable to update"),e.reject(t)})["finally"](function(e){p.pending=!1,p.account.password&&delete p.account.password,p.account.password_confirmation&&delete p.account.password_confirmation,p.account.current_password=""}),e.promise}}function c(){if(!p.pending){var e=n.defer();return p.pending=!0,t.requestPasswordReset(p.account).then(function(t){console.info(t),o.pop("success","Please check email "+p.account.email+" for instructions."),e.resolve(t)})["catch"](function(t){console.error(t),404==t.status?o.pop("error","There is no account for "+p.account.email):o.pop("error","Unable to reset password."),e.reject(t)})["finally"](function(e){p.pending=!1}),e.promise}}function l(){if(!p.pending){p.pending=!0;var e=n.defer();return t.updatePassword(p.account).then(function(t){console.info(t),o.pop("success","Password has been reset"),e.resolve(t)})["catch"](function(t){console.log(p.account),o.pop("error","Unable to reset password."),e.reject(t)})["finally"](function(e){p.pending=!1}),e.promise}}function u(){if(!p.pending){var e=n.defer();return p.pending=!0,t.destroyAccount(p.account).then(function(n){t.signOut(),o.pop("info","Account closed"),e.resolve(n)})["catch"](function(t){console.log(t),o.pop("error","Uanble to close account at this time"),p.account.current_password="",e.reject(t)})["finally"](function(e){p.pending=!1}),e.promise}}var p={pending:!1,account:null,setCurrentAccount:r,login:i,register:s,update:a,requestPasswordReset:c,resetPassword:l,destroy:u};return e.$on("auth:logout-success",function(e,t){p.account=null}),p}angular.module("nsApp.users").factory("userService",e),e.$inject=["$rootScope","$auth","$q","toaster"]}(),function(){function e(e,t){function n(e){return t.close(e)}function o(){return t.dismiss(null)}var r=this;r.imgFile=e,r.upload=n,r.cancel=o}angular.module("nsApp.shared").controller("cropImageModal",e),e.$inject=["imgFile","$uibModalInstance"]}(),function(){function e(e){return function(e,t){return e?e:"assets/img/default"+t}}angular.module("nsApp.shared").filter("defaultImg",e),e.$inject=["BASE_API_URL"]}(),function(){function e(e,t,n,o,r){function i(t){return angular.extend(p,t),u=[e,p.uri,p.imageable_id,"images"].join("/"),p}function s(){t.get(u).then(function(e){p.images=e.data})}function a(e,t){if(!p.pending){p.pending=!0;var i=o.defer();return n.upload({url:u,data:{file_data_uri:e,primary:t}}).then(function(e){r.pop("success","Image Added"),p.images.push(e.data),i.resolve(e)})["catch"](function(e){r.pop("error","Unable to upload image"),i.reject(e)})["finally"](function(){p.pending=!1}),i.promise}}function c(n){if(!p.pending&&n){p.pending=!0;var i=o.defer();return t.put(e+"/images/"+n.id,{primary:!0}).then(function(e){r.pop("success","Image set"),i.resolve(e)})["catch"](function(e){i.reject(e)})["finally"](function(){p.pending=!1}),i.promise}}function l(n){if(!p.pending&&n){var i=o.defer();return p.pending=!0,t["delete"](e+"/images/"+n.id).then(function(e){var t=p.images.indexOf(n);p.images.splice(t,1),r.pop("success","Image Removed"),i.resolve(e)})["catch"](function(e){i.reject(e)})["finally"](function(){p.pending=!1}),i.promise}}var u,p={init:i,pending:!1,images:[],loadImages:s,upload:a,setPrimary:c,destroy:l};return p}angular.module("nsApp.shared").factory("imageService",e),e.$inject=["BASE_API_URL","$http","Upload","$q","toaster"]}(),function(){function e(e,t){return{restict:"E",scope:{},bindToController:{imageable:"=",uri:"@"},controller:["$scope","imageService","$uibModal",function(e,t,n){function o(){console.log("removing...?"),i.imageService.destroy(i.imageable.primary_image).then(function(){i.imageable.primary_image=null})}function r(){if(i.imgFile){var e=n.open({controller:"cropImageModal",controllerAs:"imgCtrl",templateUrl:"shared/images/cropImageModal.html",size:"md",resolve:{imgFile:function(){return i.imgFile}}});e.result.then(function(e){i.imgFile=null,i.imageService.upload(e,!0).then(function(e){console.log(e),i.imageable.primary_image=e.data})})}}var i=this;i.imageService=t,i.imgFile=null,i.openModal=r,i.remove=o,e.$watch("imageable",function(){i.imageService.init({uri:i.uri,imageable_id:i.imageable.id})})}],controllerAs:"imgCtrl",templateUrl:"shared/images/nsPrimaryImage.html"}}angular.module("nsApp.shared").directive("nsPrimaryImage",e),e.$inject=["imageService","$uibModal"]}(),function(){function e(){return function(e){if(!e.primary_image){var t="assets/img/default/";return e.hasOwnProperty("eat")?(e.eat&&(t+="e"),e.drink&&(t+="d"),e.attend&&(t+="a")):t+="a",t+=".png"}return e.primary_image.url}}angular.module("nsApp.shared").filter("primaryImage",e)}(),function(){function e(e){function t(t,n,o){n.unbind("click").bind("click",function(n){n.preventDefault();var o=e.open({template:'<div class="modal-body clearfix"> <h3 class="text-xs-center">Confirm</h3><p class="text-xs-center" ng-bind="ctrl.message"></p><button class="btn btn-sm btn-primary-outline" ng-click="ctrl.confirm()">Ok</button><button class="btn btn-sm btn-danger-outline pull-right" ng-click="ctrl.cancel()">Cancel</button></div>',controller:["$uibModalInstance","message",function(e,t){var n=this;n.message=t||"Are you sure?",n.confirm=function(){e.close()},n.cancel=function(){e.dismiss()}}],controllerAs:"ctrl",size:"sm",resolve:{message:function(){return t.nsConfirm}}});o.result.then(function(){t.ngClick()})})}return{priority:1,restrict:"A",scope:{nsConfirm:"@",ngClick:"&"},link:t}}angular.module("nsApp.shared").directive("nsConfirm",e),e.$inject=["$uibModal"]}(),function(){function e(){function e(e,t,n,o){var r=angular.element(t[0].querySelector("input, textarea, select")),i=r[0].attributes.name.value;e.$watchCollection(function(){return[o[i].$dirty,o[i].$invalid]},function(e){e&&e[0]&&(e[1]?(t.removeClass("has-success").addClass("has-danger"),r.removeClass("form-control-success").addClass("form-control-danger")):(t.removeClass("has-danger").addClass("has-success"),r.removeClass("form-control-danger").addClass("form-control-success")))})}return{restrict:"A",require:"^form",link:e}}angular.module("nsApp.shared").directive("nsFormInput",e)}(),function(){function e(){function e(e,t,n,o){o.$validators.matches=function(t){return t==e.val},e.$watch("val",function(){o.$validate()})}return{restrict:"A",require:"ngModel",scope:{val:"=nsMatches"},link:e}}angular.module("nsApp.shared").directive("nsMatches",e)}(),function(){function e(){function e(){function e(e){r.price=e+1}function t(e){r.preview=e}function n(e){r.preview=-1}function o(e){return{eat:e<r.price,preview:e<=r.preview}}var r=this;r.preview=-1,r.prices=new Array(4),r.click=e,r.styles=o,r.mouseover=t,r.mouseout=n,r.clear=function(){r.price=0}}return{restrict:"E",scope:{},bindToController:{price:"=ngModel"},controller:e,controllerAs:"ctrl",templateUrl:"shared/forms/nsSpotPriceSelect.html"}}angular.module("nsApp.shared").directive("nsSpotPriceSelect",e)}(),function(){function e(){return{restrict:"E",scope:{},bindToController:{spot:"="},controller:["$scope",function(e){var t=this;t.valid=!1,e.$watchGroup(["ctrl.spot.eat","ctrl.spot.drink","ctrl.spot.attend"],function(e){e[0]||e[1]||e[2]?t.valid=!0:t.valid=!1})}],controllerAs:"ctrl",templateUrl:"shared/forms/nsSpotServiceSelect.html"}}angular.module("nsApp.shared").directive("nsSpotServiceSelect",e)}(),function(){function e(e,t,n,o){function r(o,r){var i=o||r;return t.get(e+"/users/emailexists",{params:{email:i}}).then(function(e){return e.data?n.reject(!1):!0})}return{restrict:"A",require:"ngModel",link:function(e,t,n,o){o.$asyncValidators.emailexists=r}}}angular.module("nsApp.shared").directive("nsUniqueEmail",e),e.$inject=["BASE_API_URL","$http","$q","$timeout"]}(),function(){function e(e,t,n,o){function r(o,r){var i=o||r;return t.get(e+"/spots/spot_exists",{params:{name:i}}).then(function(e){return e.data?n.reject(!1):!0})}return{restrict:"A",require:"ngModel",link:function(e,t,n,o){o.$asyncValidators.spotExists=r}}}angular.module("nsApp.spots").directive("nsUniqueSpot",e),e.$inject=["BASE_API_URL","$http","$q","$timeout"]}(),function(){angular.module("nsApp.shared").value("states",{AL:"Alabama",AK:"Alaska",AS:"American Samoa",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District Of Columbia",FM:"Federated States Of Micronesia",FL:"Florida",GA:"Georgia",GU:"Guam",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MH:"Marshall Islands",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",MP:"Northern Mariana Islands",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PW:"Palau",PA:"Pennsylvania",PR:"Puerto Rico",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VI:"Virgin Islands",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"})}(),function(){function e(e,t,n,o,r){function i(){var e;return p.search||(p.user?(p.search=angular.copy(p.user),u()):e=s()),t.when(e?e:p.search)}function s(){return p.pending=!0,n.getCurrentPosition().then(function(e){p.user=p.search={lat:e.coords.latitude,lng:e.coords.longitude},u()})["catch"](function(e){r.pop("error","Unable to find current location.")})["finally"](function(){p.pending=!1})}function a(e){p.search=e,u()}function c(){return console.log("setSearchToUser"),r.pop("info","Using Current Location"),p.search=p.user,u(),t.when(p.search)}function l(e,t){if(!p.user)return null;var n=Math.PI*p.user.lat/180,o=Math.PI*e/180,r=(Math.PI*p.user.lng/180,Math.PI*t/180,p.user.lng-t),i=Math.PI*r/180,s=Math.sin(n)*Math.sin(o)+Math.cos(n)*Math.cos(o)*Math.cos(i);return s=Math.acos(s),s=180*s/Math.PI,s=60*s*1.1515,s=.8684*s,Math.round(100*s)/100}function u(){e.$emit("locationChanged")}var p={init:i,user:null,search:null,radius:"1",pending:!1,setUserLocation:s,setSearch:a,save:u,setSearchToUser:c,distance:l};return p}angular.module("nsApp.shared").factory("LocationManager",e),e.$inject=["$rootScope","$q","$geolocation","localStorageService","toaster"]}(),function(){function e(e,t,n){return{restrict:"A",scope:{location:"=nsMap"},link:function(o,r,i){function s(){var t=e.user;if(a&&c.removeLayer(a),a=L.mapbox.featureLayer({type:"Feature",geometry:{type:"Point",coordinates:[o.location.longitude,o.location.latitude]},properties:{title:o.location.name,description:o.location.address,"marker-size":"medium","marker-color":"#FF4DFF"}}).addTo(c),t){var n=new L.LatLng(t.lat,t.lng);L.circleMarker(n,{color:"white",radius:7,stroke:!0,weight:2,fillColor:"#1c93fb",fillOpacity:.8}).addTo(c)}c.setView([o.location.latitude,o.location.longitude],16),a.eachLayer(function(e){e.openPopup()})}L.mapbox.accessToken=t;var a,c=L.mapbox.map(r[0],n,{maxZoom:18,minZoom:14,scrollWheelZoom:!1});c.setView([40.4411175,-79.9989563],14),o.$watch("location",function(e,t){console.log(o.location),e&&e.latitude&&s()},!0)}}}angular.module("nsApp.shared").directive("nsMap",e),e.$inject=["LocationManager","MAPBOX_ACCESS_TOKEN","MAPBOX_ID"]}(),function(){function e(e,t,n,o,r){function i(i,s,a){function c(){var t=e.user,n=e.search;if(m.length=0,u(),t){var r=new L.LatLng(t.lat,t.lng);L.circleMarker(r,{color:"white",radius:7,stroke:!0,weight:2,fillColor:"#1c93fb",fillOpacity:.8}).addTo(f),t.lat===n.lat&&m.push(r)}if(i.locations.length)l();else if(n){var s=new L.LatLng(n.lat,n.lng);return f.setView(s,14)}m.length&&o(function(){f.fitBounds(m,{padding:[10,10]})},350)}function l(){for(var e=0,t=i.locations.length;t>e;e++){var n=i.locations[e].id,o=new L.LatLng(i.locations[e].latitude,i.locations[e].longitude),r=L.marker(o,{title:i.locations[e].name,icon:L.mapbox.marker.icon({"marker-size":"medium","marker-symbol":e+1,"marker-color":d(n)}),zIndexOffset:p(n)}).addTo(f).bindPopup("<strong>"+i.locations[e].name+"</strong><br/>"+i.locations[e].address,{closeButton:!1}).on("mouseover",function(e){this.openPopup()}).on("mouseout",function(e){this.closePopup()});v.push(r),m.push(o)}}function u(){for(var e=0,t=v.length;t>e;e++)f.removeLayer(v[e])}function p(e){return r.spot&&r.spot.id==e?9999:0}function d(e){return r.spot&&r.spot.id==e?"#FF4DFF":{eat:"#4DFF4D",drink:"#FF4D4D",attend:"#4DD2FF","":"#000"}[i.sort]}L.mapbox.accessToken=t;var f=L.mapbox.map(s[0],n,{maxZoom:17,minZoom:12,scrollWheelZoom:!1}),m=[],v=[];i.$watchCollection("locations",function(){c()}),i.$watch(function(){return e.search},function(){c()}),i.$watch(function(){return r.spot},function(e,t){u(),l(),e||m.length&&f.fitBounds(m,{padding:[20,20]})})}return{restrict:"A",scope:{locations:"=nsMapList",sort:"@"},link:i}}angular.module("nsApp.shared").directive("nsMapList",e),e.$inject=["LocationManager","MAPBOX_ACCESS_TOKEN","MAPBOX_ID","$timeout","focused"]}(),function(){function e(e,t){var n=this;n.category=e,n.filterParams=t}angular.module("nsApp.spots").controller("categoriesOverlay",e),e.$inject=["Category","filterParams"]}(),function(){function e(){return{restrict:"E",scope:{},bindToController:{sort:"="},controller:["overlay","filterParams",function(e,t){function n(){var t=e.open("components/overlay/categories/"+o.sort+"Overlay.html");t.then(function(e){})}var o=this;o.openOverlay=n,o.filterParams=t}],controllerAs:"ctrl",template:"<button class='ns-filter-btn {{ctrl.sort}}-toggle-btn' ng-click='ctrl.openOverlay()'> Features <span class='ns-filter-count {{ctrl.sort}}' ng-show='ctrl.filterParams[ctrl.sort].length'> {{ ctrl.filterParams[ctrl.sort].length }}</span></button>"}}angular.module("nsApp.overlay").directive("nsCategoriesOverlayBtn",e)}(),function(){function e(e,t){var n=this;n.feature=e,n.filterParams=t}angular.module("nsApp.overlay").controller("featuresOverlay",e),e.$inject=["Feature","filterParams"]}(),function(){function e(){return{restrict:"E",scope:{},controller:["overlay","filterParams",function(e,t){function n(){var t=e.open("components/overlay/features/featuresOverlay.html");t.then(function(e){})}var o=this;o.openOverlay=n,o.filterParams=t}],controllerAs:"ctrl",template:"<button class='ns-filter-btn feature-toggle-btn' ng-click='ctrl.openOverlay()'> Features <span class='ns-filter-count loud' ng-show='ctrl.filterParams.features.length'> {{ctrl.filterParams.features.length }}</span></button>"}}angular.module("nsApp.overlay").directive("nsFeaturesOverlayBtn",e)}(),function(){function e(e,t){function n(){t.setSearch({lat:o.PACLocation.geometry.location.lat(),lng:o.PACLocation.geometry.location.lng(),address:o.PACLocation.formatted_address}),o.address=o.PACLocation.formatted_address}var o=this;o.locationManager=t,o.address=t.search&&t.search.address?t.search.address:"",o.PACLocation=null,o.sliderOptions={floor:1,ceil:8,showSelectionBar:!0,showTicks:!0,onEnd:function(){return t.save()},translate:function(e){return e+" mi"},getSelectionBarColor:function(e){return"#B200B2"},getPointerColor:function(e){return"#FF4DFF"}},e.$watch("locationCtrl.PACLocation",function(e){return e&&e.geometry?n():void 0})}angular.module("nsApp.overlay").controller("locationSettingsOverlay",e),e.$inject=["$scope","LocationManager"]}(),function(){function e(){return{restrict:"E",scope:{},controller:["overlay","LocationManager","$scope","$timeout",function(e,t,n,o){function r(){var t=e.open("components/overlay/location/locationSettingsOverlay.html");i(),t.then(function(e){console.log(e)})["finally"](function(){i()})}function i(){o(function(){n.$broadcast("rzSliderForceRender")})}var s=this;s.openOverlay=r,s.locationManager=t}],controllerAs:"ctrl",template:'{{ctrl.locationManager.search.address}} <button class="ns-filter-btn location-toggle-btn" ng-click="ctrl.openOverlay()"> Location </button>'}}angular.module("nsApp.overlay").directive("nsLocationOverlayBtn",e)}(),function(){function e(e,t,n){function o(){e.user&&e.user.signedIn&&s.spotService.userIndex().then(function(e){s.userSpots=e})}function r(){return e.signOut(),t.resolve({state:"home"})}function i(e){return s.spotService.spot=e,t.resolve({state:"edit.about"})}var s=this;s.overlay=t,s.signOut=r,s.spotService=n,s.userSpots=[],s.update=i,o()}angular.module("nsApp.overlay").controller("navOverlay",e),e.$inject=["$rootScope","overlay","spotService"]}(),function(){function e(e,t,n){function o(){i.spotService.search(i.filterParams.q).then(function(e){i.spots=e})}function r(e){var t="/";return e.eat||e.drink||e.attend?(e.eat&&(t+="e"),e.drink&&(t+="d"),e.attend&&(t+="a")):t+="a",t+=".png"}var i=this;i.overlay=e,i.spotService=t,i.filterParams=n,i.spots=[],i.searchName=o,i.placeholder=r,i.q=""}angular.module("nsApp.spots").controller("searchOverlay",e),e.$inject=["overlay","spotService","filterParams"]}(),function(){function e(e,t,n,o){var r=this;r.imageService=n.init({uri:"spots",imageable_id:e.id}),r.imageService.loadImages(),r.openNow=t,o.index().then(function(t){r.features=t.filter(function(t){return e.feature_ids.indexOf(t.id)>-1})})}angular.module("nsApp.spots").controller("about",e),e.$inject=["spot","openNow","imageService","Feature"]}(),function(){function e(e,t,n){var o=this;o.category=t,o.feature=n,o.prices=[{val:0,label:"N/A"},{val:1,label:"$"},{val:2,label:"$$"},{val:3,label:"$$$"},{val:4,label:"$$$$"}]}angular.module("nsApp.spots").controller("editAbout",e),e.$inject=["spot","Category","Feature"]}(),function(){function e(e,t,n){function o(e){e.$invalid||i.spotService.update()}function r(){i.spotService.destroy().then(function(e){t.go("business")})}var i=this;i.spotService=e,i.update=o,i.destroy=r,i.states=n}angular.module("nsApp.spots").controller("editSpot",e),e.$inject=["spotService","$state","states"]}(),function(){angular.module("nsApp.spots").value("days",{0:"Sun",1:"Mon",2:"Tue",3:"Wed",4:"Thu",5:"Fri",6:"Sat"})}(),function(){function e(e,t){function n(e){if(e)e.start_date=new Date(e.start_date),e.start_time=new Date(e.start_time),e.end_date&&(e.end_date=new Date(e.end_date)),e.end_time&&(e.end_time=new Date(e.end_time)),r.eventService.event=e;else{var n=new Date;r.eventService.event={start_date:n,start_time:null,entry:"free",age:"all ages"}}var o=t.open({controller:"eventModal",controllerAs:"eventCtrl",templateUrl:"components/spots/events/eventModal.html",size:"md"});o.result.then(function(){r.eventService.event=null})}function o(e){r.eventService.event=e,r.eventService.destroy()}var r=this;new Date;r.eventService=e,r.eventService.loadEvents(),r.openModal=n,r.destroy=o}angular.module("nsApp.spots").controller("editEvents",e),
e.$inject=["eventService","$uibModal"]}(),function(){function e(e,t){var n=e+"/spots/:spot_id/events";return t(e+"/events/:id",{id:"@id",spot_id:"@spot_id"},{index:{method:"GET",url:n,isArray:!0},create:{method:"POST",url:n},update:{method:"PUT"}})}angular.module("nsApp.spots").factory("Event",e),e.$inject=["BASE_API_URL","$resource"]}(),function(){function e(e,t,n){function o(){t.save().then(function(t){return e.close()})}function r(){return e.dismiss(null)}var i=this;i.eventService=t,i.category=n,i.save=o,i.cancel=r,i.minDate=new Date,i.maxDate=(new Date).setDate((new Date).getDate()+180)}angular.module("nsApp.spots").controller("eventModal",e),e.$inject=["$uibModalInstance","eventService","Category"]}(),function(){function e(e,t,n,o){function r(n){if(!l.pending){var n=n||t.spot.id;l.pending=!0,e.index({spot_id:n}).$promise.then(function(t){l.events=t.map(function(t){return t.start_date=new Date(t.start_date),t.start_time=new Date(t.start_time),t.end_date&&(t.end_date=new Date(t.end_date)),t.end_time&&(t.end_time=new Date(t.end_time)),new e(t)})})["finally"](function(){l.pending=!1})}}function i(){return l.pending||!l.event?n.reject():l.event.id?a():s()}function s(){var r=n.defer();return l.pending=!0,l.event.spot_id=t.spot.id,e.create(l.event).$promise.then(function(t){t.start_date=new Date(t.start_date),t.start_time=new Date(t.start_time),t.end_date&&(t.end_date=new Date(t.end_date)),t.end_time&&(t.end_time=new Date(t.end_time));var n=new e(t);l.events.push(n),l.event=null,o.pop("success","Event created"),r.resolve(t)})["catch"](function(e){o.pop("error","Unable to add event"),r.reject(e)})["finally"](function(){l.pending=!1}),r.promise}function a(){var e=n.defer();return l.pending=!0,l.event.$update().then(function(t){o.pop("success","Event updated"),l.event=null,e.resolve(t)})["catch"](function(t){o.pop("error","Unable to update event"),e.reject(t)})["finally"](function(){l.pending=!1}),e.promise}function c(){!l.pending&&l.event&&(l.pending=!0,l.event.$delete().then(function(e){var t=l.events.indexOf(l.event);return l.events.splice(t,1),l.event=null,o.pop("success","Event removed"),e})["catch"](function(e){console.error(e)})["finally"](function(){l.pending=!1}))}var l={pending:!1,events:[],event:null,loadEvents:r,save:i,destroy:c};return l}angular.module("nsApp.spots").factory("eventService",e),e.$inject=["Event","spotService","$q","toaster"]}(),function(){function e(e,t){var n=this;new Date;n.eventService=t,n.eventService.loadEvents(e.id)}angular.module("nsApp.spots").controller("events",e),e.$inject=["spot","eventService"]}(),function(){angular.module("nsApp.spots").value("months",{0:"Jan",1:"Feb",2:"Mar",3:"Apr",4:"May",5:"Jun",6:"Jul",7:"Aug",8:"Sep",9:"Oct",10:"Nov",11:"Dec"})}(),function(){function e(e,t){return function(n){var o,r=new Date(n.start_date),i=r.getDate(),s=t[r.getDay()],a=e[r.getMonth()];if(n.end_date&&n.start_date!=n.end_date){var c=new Date(n.end_date),l=c.getDate(),u=e[c.getMonth()];o=a===u?a+" "+i+" - "+l:a+" "+i+" - "+u+" "+l}else o=s+", "+a+" "+i;return o}}angular.module("nsApp.spots").filter("occurrenceDate",e),e.$inject=["months","days"]}(),function(){function e(e,t,n){function o(e){return t.post(i,{spot_id:e.id}).then(function(e){return n.pop("warning","Spot added to favorites",""),e})}function r(e){return t["delete"](i+("/"+e.id)).then(function(e){return n.pop("warning","Spot removed from favorites",""),e})}var i=e+"/favorites";return{create:o,remove:r}}angular.module("nsApp.spots").factory("Favorite",e),e.$inject=["BASE_API_URL","$http","toaster"]}(),function(){function e(e,t){function n(){o.spotService.favorites()}var o=this;o.spotService=t,n()}angular.module("nsApp.spots").controller("favorites",e),e.$inject=["$scope","spotService"]}(),function(){function e(){return{restrict:"E",scope:{},bindToController:{spot:"="},controller:["$rootScope","Favorite","toaster",function(e,t,n){var o=this;o.isFavorited=function(){return!!(e.user.signedIn&&e.user.favorite_spot_ids.indexOf(o.spot.id)>-1)},o.add=function(){return e.user.signedIn?void t.create(o.spot).then(function(t){o.spot.favorites_count+=1,e.user.favorite_spot_ids.push(o.spot.id)}):void n.pop("info","Please Sign In to track your favorites!")},o.remove=function(){console.log("Removing.."),t.remove(o.spot).then(function(t){console.log(t),o.spot.favorites_count-=1;var n=e.user.favorite_spot_ids.indexOf(o.spot.id);e.user.favorite_spot_ids.splice(n,1)})}}],controllerAs:"favsCtrl",templateUrl:"components/spots/favorites/nsFavoriteBtn.html"}}angular.module("nsApp.spots").directive("nsFavoriteBtn",e)}(),function(){function e(e,t,n){function o(){i.spotService.params={},i.spotService.init()}function r(){return i.filteredSpots=e.$eval("vm.spotService.spots | features:vm.filterParams.features | orderBy:vm.filterParams.order"),i.filteredSpots}var i=this;i.spotService=t,i.filterParams=n,i.filteredSpots=[],i.applyFilters=r,i.today=new Date,o(),e.$watchCollection("vm.spotService.spots",function(){return r()}),e.$watchCollection("vm.filterParams.features",function(){return r()}),e.$watch("vm.filterParams.order",function(){return r()})}angular.module("nsApp.spots").controller("home",e),e.$inject=["$scope","spotService","filterParams"]}(),function(){function e(e,t){var n=e+"/spots/:spot_id/hours";return t(e+"/hours/:id",{id:"@id",spot_id:"@spot_id"},{index:{method:"GET",url:n,isArray:!0},create:{method:"POST",url:n},update:{method:"PUT"}})}angular.module("nsApp.spots").factory("Hour",e),e.$inject=["BASE_API_URL","$resource"]}(),function(){function e(e,t,n,o){function r(){!l.pending&&t.spot&&(l.hours.length=0,l.hours=t.spot.hours.map(function(t){return new e(angular.extend(t,{open:new Date(t.open),close:new Date(t.close),days:t.days.map(Number)}))}))}function i(){return!l.pending&&l.hour?l.hour.id?a():s():void 0}function s(){var r=n.defer();return console.log(l.hour),l.pending=!0,l.hour.spot_id=t.spot.id,e.create(l.hour).$promise.then(function(t){var n=new e(angular.extend(t,{open:new Date(t.open),close:new Date(t.close),days:t.days.map(Number)}));l.hours.push(n),o.pop("success","Hours added"),r.resolve(t)})["catch"](function(e){o.pop("error","Unable to add hours"),r.reject(e)})["finally"](function(){l.pending=!1}),r.promise}function a(){var e=n.defer();return l.pending=!0,l.hour.$update().then(function(t){o.pop("success","Hours updated"),angular.extend(l.hour,{open:new Date(t.open),close:new Date(t.close)}),e.resolve(t)})["catch"](function(t){o.pop("error","Unable to update hours"),e.reject(t)})["finally"](function(){l.pending=!1}),e.promise}function c(){!l.pending&&l.hour&&(l.pending=!0,l.hour.$delete().then(function(e){var t=l.hours.indexOf(l.hour);return l.hours.splice(t,1),l.hour=null,o.pop("success","Hours removed"),e})["catch"](function(e){console.error(e)})["finally"](function(){l.pending=!1}))}var l={pending:!1,hours:[],hour:null,setHours:r,save:i,destroy:c};return l}angular.module("nsApp.spots").factory("hourService",e),e.$inject=["Hour","spotService","$q","toaster"]}(),function(){function e(e,t){function n(){t.save().then(function(t){return e.close()})}function o(){return e.dismiss(null)}var r=this;r.hourService=t,r.save=n,r.cancel=o}angular.module("nsApp.spots").controller("hoursModal",e),e.$inject=["$uibModalInstance","hourService"]}(),function(){function e(e,t){return{restrict:"E",templateUrl:"components/spots/hours/nsEditHours.html",controller:["hourService","$uibModal",function(e,t){function n(e){e?r.hourService.hour=angular.extend(e,{open:new Date(e.open),close:new Date(e.close),days:e.days.map(Number)}):r.hourService.hour={};var n=t.open({controller:"hoursModal",controllerAs:"hrsCtrl",templateUrl:"components/spots/hours/hoursModal.html",size:"md"});n.result.then(function(e){r.hourService.hour=null})}function o(e){e&&(r.hourService.hour=e,r.hourService.destroy().then(function(e){r.hourService.hour=null}))}var r=this;r.hourService=e,r.hourService.setHours(),r.openModal=n,r.remove=o}],controllerAs:"hrsCtrl"}}angular.module("nsApp.spots").directive("nsEditHours",e),e.$inject=["hourService","$uibModal"]}(),function(){function e(e){return{restrict:"E",scope:!0,bindToController:{hours:"="},controller:["openNow",function(e){this.openNow=e,this.open=!1}],controllerAs:"ctrl",templateUrl:"components/spots/hours/nsHoursTable.html"}}angular.module("nsApp.spots").directive("nsHoursTable",e),e.$inject=["openNow"]}(),function(){function e(){return{restrict:"E",controller:["$scope","spotService","imageService","$uibModal",function(e,t,n,o){function r(e){a.imageService.setPrimary(e).then(function(n){a.imageService.loadImages(),t.spot.primary_image=e,e.primary=!0})}function i(e){a.imageService.destroy(e)}function s(){if(a.imgFile){var e=o.open({controller:"cropImageModal",controllerAs:"imgCtrl",templateUrl:"shared/images/cropImageModal.html",size:"md",resolve:{imgFile:function(){return a.imgFile}}});e.result.then(function(e){a.imgFile=null,a.imageService.upload(e,!1).then(function(e){console.log(e)})})}}var a=this;a.imgFile=null,a.imageService=n,a.imageService.init({uri:"spots",imageable_id:t.spot.id}),a.imageService.loadImages(),a.setPrimary=r,a.remove=i,a.openModal=s}],controllerAs:"imgsCtrl",templateUrl:"components/spots/images/nsEditImages.html"}}angular.module("nsApp.spots").directive("nsEditImages",e),e.$inject=["spotService","imageService","$uibModal"]}(),function(){angular.module("nsApp.spots").value("focused",{spot:null})}(),function(){function e(){return{restrict:"E",scope:{},bindToController:{spot:"=",sort:"@",index:"="},controller:["openNow","focused",function(e,t){var n=this;n.openNow=e,n.highlight=!1,n.focus=function(){n.highlight=!0,t.spot=n.spot},n.unfocus=function(){n.highlight=!1,t.spot=null}}],controllerAs:"spotCtrl",templateUrl:"components/spots/list/nsSpotBlock.html"}}angular.module("nsApp.spots").directive("nsSpotBlock",e)}(),function(){function e(e){return{restrict:"E",scope:{},bindToController:{spot:"=",index:"="},controller:["filterParams","focused",function(e,t){var n=this;n.filterParams=e,n.focus=function(){n.highlight=!0,t.spot=n.spot},n.unfocus=function(){n.highlight=!1,t.spot=null}}],controllerAs:"spotCtrl",templateUrl:"components/spots/list/nsVenueBlock.html"}}angular.module("nsApp.spots").directive("nsVenueBlock",e),e.$inject=["filterParams"]}(),function(){function e(e,t){function n(e){s.menuService.menu=e||{};var n=t.open({controller:"menuModal",controllerAs:"menusCtrl",templateUrl:"components/spots/menus/menuModal.html",size:"md"});n.result.then(function(e){s.menuService.menu=null})}function o(e,n){s.menuService.menu=e;var o=t.open({controller:"itemModal",controllerAs:"itemsCtrl",templateUrl:"components/spots/menus/itemModal.html",size:"md",resolve:{item:function(){return n}}});o.result.then(function(e){s.menuService.menu=null})}function r(e){e&&(s.menuService.menu=e,s.menuService.destroy())}function i(e){s.menuService.menu=e,s.menuService.save(),s.menuService.menu=null}var s=this;s.menuService=e,s.menuService.loadMenus(),s.openMenuModal=n,s.openItemModal=o,s.updateMenu=i,s.removeMenu=r}angular.module("nsApp.spots").controller("editMenus",e),e.$inject=["menuService","$uibModal"]}(),function(){function e(e,t,n){function o(){i.item.id||i.menuService.menu.items_attributes.push(i.item),n.save().then(function(e){return t.close()})}function r(){return t.dismiss(null)}var i=this;i.menuService=n,i.save=o,i.cancel=r,i.item=e||{}}angular.module("nsApp.spots").controller("itemModal",e),e.$inject=["item","$uibModalInstance","menuService"]}(),function(){function e(e,t){var n=e+"/spots/:spot_id/menus";return t(e+"/menus/:id",{id:"@id",spot_id:"@spot_id"},{index:{method:"GET",url:n,isArray:!0},create:{method:"POST",url:n},update:{method:"PUT"}})}angular.module("nsApp.spots").factory("Menu",e),e.$inject=["BASE_API_URL","$resource"]}(),function(){function e(e,t){function n(){t.save().then(function(t){return e.close()})}function o(){return e.dismiss(null)}var r=this;r.menuService=t,r.save=n,r.cancel=o}angular.module("nsApp.spots").controller("menuModal",e),e.$inject=["$uibModalInstance","menuService"]}(),function(){function e(e,t,n,o){function r(n){if(!l.pending){l.pending=!0;var n=n||t.spot.id;e.index({spot_id:n}).$promise.then(function(t){l.menus=t.map(function(t){return new e(t)})})["finally"](function(){l.pending=!1})}}function i(){return l.pending||!l.menu?n.reject():l.menu.id?a():s()}function s(){var r=n.defer();return l.pending=!0,l.menu.spot_id=t.spot.id,e.create(l.menu).$promise.then(function(t){var n=new e(t);l.menus.push(n),l.menu=null,o.pop("success","Menu added"),r.resolve(t)})["catch"](function(e){o.pop("error","Unable to add menu"),r.reject(e)})["finally"](function(){l.pending=!1}),r.promise}function a(){var e=n.defer();return l.pending=!0,l.menu.$update().then(function(t){o.pop("success","Menu updated"),l.menu=null,e.resolve(t)})["catch"](function(t){o.pop("error","Unable to update menu"),e.reject(t)})["finally"](function(){l.pending=!1}),e.promise}function c(){!l.pending&&l.menu&&(l.pending=!0,l.menu.$delete().then(function(e){var t=l.menus.indexOf(l.menu);return l.menus.splice(t,1),l.menu=null,o.pop("success","menus removed"),e})["catch"](function(e){console.error(e)})["finally"](function(){l.pending=!1}))}var l={pending:!1,menus:[],menu:null,loadMenus:r,save:i,destroy:c};return l}angular.module("nsApp.spots").factory("menuService",e),e.$inject=["Menu","spotService","$q","toaster"]}(),function(){function e(e,t){var n=this;n.menuService=t,n.menuService.loadMenus(e.id)}angular.module("nsApp.spots").controller("menus",e),e.$inject=["spot","menuService"]}(),function(){function e(e,t,n,o,r,i){function s(){l.spotData.name=l.PACLocation.name,l.spotData.street=[l.PACLocation.address_components[0].long_name,l.PACLocation.address_components[1].short_name].join(", "),l.spotData.city=l.PACLocation.address_components[2].short_name,l.spotData.state=l.PACLocation.address_components[3].short_name,l.spotData.phone=l.PACLocation.formatted_phone_number,l.spotData.website_url=l.PACLocation.website,l.spotData.latitude=l.PACLocation.geometry.location.lat(),l.spotData.longitude=l.PACLocation.geometry.location.lng()}function a(){var e=new google.maps.Geocoder,t=[l.spotData.street,l.spotData.city,l.spotData.state].join(", ");e.geocode({address:t},function(e,t){t==google.maps.GeocoderStatus.OK&&(l.spotData.latitude=e[0].geometry.location.lat(),l.spotData.longitude=e[0].geometry.location.lng())})}function c(){var e=r.open({controller:"newSpotModal",controllerAs:"ctrl",templateUrl:"components/spots/new/newSpotModal.html",size:"md"});e.result.then(function(e){n.create(l.spotData).then(function(e){n.spot=new t(e),o.go("edit.about")})})}var l=this;l.spotData={},l.PACLocation=null,l.openModal=c,l.states=i,e.$watchCollection("[spotForm.street.$valid, spotForm.city.$valid, spotForm.state.$valid]",function(e,t){return e[0]&&e[1]&&e[2]&&!l.spotData.latitude&&!l.spotData.longitude?a():void 0}),e.$watch("vm.PACLocation",function(e){return e&&e.geometry?s():void 0})}angular.module("nsApp.spots").controller("newSpot",e),e.$inject=["$scope","Spot","spotService","$state","$uibModal","states"]}(),function(){function e(e){function t(){return e.close()}function n(){return e.dismiss(null)}var o=this;o.save=t,o.cancel=n}angular.module("nsApp.spots").controller("newSpotModal",e),e.$inject=["$uibModalInstance"]}(),function(){function e(){return{restrict:"E",scope:{},bindToController:{spot_id:"@spot"},controller:["$uibModal",function(e){function t(){e.open({controller:"nsReportModal",controllerAs:"ctrl",templateUrl:"components/spots/reports/nsReportModal.html",size:"sm",resolve:{spot_id:function(){return n.spot_id}}})}var n=this;n.openModal=t}],controllerAs:"ctrl",template:'<span class="ns-report pull-right" ng-click="ctrl.openModal()">!<i class="fa fa-flag"></i> Report Abuse<span>'}}angular.module("nsApp.spots").directive("nsReport",e)}(),function(){function e(e,t,n){function o(){i.report.create(i.reportData).then(function(t){e.close()})}function r(){e.dismiss()}var i=this;i.report=n,i.reportData={spot_id:t},i.send=o,i.cancel=r}angular.module("nsApp.spots").controller("nsReportModal",e),e.$inject=["$uibModalInstance","spot_id","Report"]}(),function(){function e(e,t,n){var o={pending:!1,create:function(r){return o.pending?void 0:(o.pending=!0,t.post(e+"/reports",r).then(function(){n.pop("info","Thank you for your feedback")})["catch"](function(){n.pop("error","Unable to send report. Please contact info@thenitespot.com")})["finally"](function(){o.pending=!1}))}};return o}angular.module("nsApp.spots").factory("Report",e),e.$inject=["BASE_API_URL","$http","toaster"]}(),function(){function e(){return function(e,t){var n=t.length;if(!n)return e;for(var o=[],r=0,i=e.length;i>r;r++){for(var s=0,a=0,c=t.length;c>a;a++)e[r].feature_ids.indexOf(t[a])>-1&&s++;s===n&&o.push(e[r])}return o}}angular.module("nsApp.spots").filter("features",e)}(),function(){function e(){return function(e,t,n){if(!n.length)return e;for(var o=[],r=0,i=e.length;i>r;r++)for(var s=0,a=e[r][t].length;a>s;s++)if(n.indexOf(e[r][t][s])>-1){o.push(e[r]);break}return o}}angular.module("nsApp.spots").filter("idArr",e)}(),function(){function e(){return{restrict:"E",template:"<div class='ns-order-select'>Order by <select class='ns-order-select' ng-model='vm.filterParams.order'><option value='distance'>Distance</option><option value='-favorites_count'>Favorites</option></select></div>"}}angular.module("nsApp.spots").directive("nsOrderSelect",e)}(),function(){function e(e,t,n,o){function r(){s.spotService.params={sort:n},s.spotService.init()}function i(){return s.filteredSpots=e.$eval("vm.spotService.spots | idArr:'category_ids':vm.filterParams[vm.sort] | features:vm.filterParams.features | orderBy:vm.filterParams.order"),s.filteredSpots}var s=this;s.spotService=t,s.sort=n,s.filterParams=o,s.filteredSpots=[],s.applyFilters=i,s.today=new Date,r(),e.$watchCollection("vm.spotService.spots",function(){return i()}),e.$watchCollection("vm.filterParams[vm.sort]",function(){return i()}),e.$watchCollection("vm.filterParams.features",function(){return i()}),e.$watch("vm.filterParams.order",function(){return i()})}angular.module("nsApp.spots").controller("search",e),e.$inject=["$scope","spotService","sort","filterParams"]}(),function(){function e(e,t,n){function o(){r.spotService.params={sort:"attend"},r.spotService.init()}var r=this;r.spotService=t,r.today=new Date,o()}angular.module("nsApp.spots").controller("searchVenues",e),e.$inject=["$scope","spotService","filterParams"]}(),function(){function e(e,t,n,o,r){function i(e){if(e)t.special=angular.extend(e,{start_time:e.start_time?new Date(e.start_time):null,end_time:e.end_time?new Date(e.end_time):null,start_date:new Date(e.start_date),end_date:e.end_date?new Date(e.end_date):null});else{new Date;t.special={start_date:new Date}}var n=r.open({controller:"featuredSpecialModal",controllerAs:"splsCtrl",templateUrl:"components/spots/specials/featured/featuredSpecialModal.html",size:"md"});n.result.then(function(e){t.special=null})}function s(e){e?l.specialService.special=angular.extend(e,{start_time:new Date(e.start_time),end_time:new Date(e.end_time),days:e.days.map(Number)}):l.specialService.special={};var t=r.open({controller:"specialModal",controllerAs:"splsCtrl",templateUrl:"components/spots/specials/specialModal.html",size:"md"});t.result.then(function(e){l.specialService.special=null,l.specialService.sortSpecials()})}function a(e){e&&(l.specialService.special=e,l.specialService.destroy())}function c(e){e&&(l.featuredSpecialService.special=e,l.featuredSpecialService.destroy())}var l=this;l.specialService=e,l.specialService.loadSpecials(),l.featuredSpecialService=t,l.featuredSpecialService.loadSpecials(),l.headings=n,l.openNow=o,l.openWeeklySpecialModal=s,l.openFeaturedSpecialModal=i,l.remove=a,l.removeFeatured=c}angular.module("nsApp.spots").controller("editSpecials",e),e.$inject=["specialService","featuredSpecialService","specialHeadings","openNow","$uibModal"]}(),function(){function e(e,t){var n=e+"/spots/:spot_id/specials";return t(e+"/specials/:id",{id:"@id",spot_id:"@spot_id"},{index:{method:"GET",url:n,isArray:!0},weekly:{method:"GET",url:n+"/weekly",isArray:!0},featured:{method:"GET",url:n+"/featured",isArray:!0},create:{method:"POST",url:n},update:{method:"PUT"}})}angular.module("nsApp.spots").factory("Special",e),e.$inject=["BASE_API_URL","$resource"]}(),function(){angular.module("nsApp.spots").value("specialHeadings",{0:"* Daily",1:"Mondays",2:"Tuesdays",3:"Wednesdays",4:"Thursdays",5:"Fridays",6:"Saturdays",7:"Sundays"})}(),function(){function e(e,t){function n(){t.save().then(function(t){return e.close()})}function o(){return e.dismiss(null)}var r=this;r.specialService=t,r.save=n,r.cancel=o,r.minDate=new Date,r.maxDate=(new Date).setDate((new Date).getDate()+30)}angular.module("nsApp.spots").controller("specialModal",e),e.$inject=["$uibModalInstance","specialService"]}(),function(){function e(e,t,n,o){function r(n){if(!u.pending){u.pending=!0;var n=n||t.spot.id;e.weekly({spot_id:n}).$promise.then(function(t){u.specials=t.map(function(t){return new e(t)}),i()})["finally"](function(){u.pending=!1})}}function i(){Object.keys(u.sortedSpecials).map(function(e,t){u.sortedSpecials[e].length=0});for(var e=0,t=u.specials.length;t>e;e++)if(7==u.specials[e].days.length)u.sortedSpecials[0].push(u.specials[e]);else for(var n=0;8>n;n++)u.specials[e].days.indexOf(""+n)>-1&&u.sortedSpecials[n].push(u.specials[e])}function s(){return!u.pending&&u.special?u.special.id?c():a():void 0}function a(){var r=n.defer();return u.pending=!0,u.special.spot_id=t.spot.id,e.create(u.special).$promise.then(function(t){var n=new e(t);u.specials.push(n),u.special=null,o.pop("success","Special added"),i(),r.resolve(t)})["catch"](function(e){o.pop("error","Unable to add special"),r.reject(e)})["finally"](function(){u.pending=!1}),r.promise}function c(){var e=n.defer();return u.pending=!0,u.special.$update().then(function(t){o.pop("success","Special updated"),u.special=null,i(),e.resolve(t)})["catch"](function(t){o.pop("error","Unable to update special"),e.reject(t)})["finally"](function(){u.pending=!1}),e.promise}function l(){!u.pending&&u.special&&(u.pending=!0,u.special.$delete().then(function(e){var t=u.specials.indexOf(u.special);return u.specials.splice(t,1),u.special=null,o.pop("success","Special removed"),i(),e})["catch"](function(e){console.error(e)})["finally"](function(){u.pending=!1}))}var u={pending:!1,specials:[],sortedSpecials:{0:[],1:[],2:[],3:[],4:[],5:[],6:[],7:[]},sortSpecials:i,special:null,loadSpecials:r,save:s,destroy:l};return u}angular.module("nsApp.spots").factory("specialService",e),e.$inject=["Special","spotService","$q","toaster"]}(),function(){function e(e,t,n,o){var r=this;r.specialService=t,r.specialService.loadSpecials(e.id),r.headings=n,r.openNow=o}angular.module("nsApp.spots").controller("specials",e),e.$inject=["spot","specialService","specialHeadings","openNow"]}(),function(){function e(e,t,n){return{restrict:"E",templateUrl:"components/spots/userRoles/nsSearchUsers.html",link:function(o,r,i){function s(){n.get(t+"/users/search",{params:{q:o.query}}).then(function(e){o.users=e.data})}function a(t){for(var n=0,o=e.roles.length;o>n;n++)if(e.roles[n].user.id===t.id)return!0;return!1}o.users=[],o.userRoleService=e,o.searchUsers=s,o.userBelongs=a}}}angular.module("nsApp.spots").directive("nsSearchUsers",e),e.$inject=["userRoleService","BASE_API_URL","$http"]}(),function(){function e(e,t,n){return{restrict:"E",templateUrl:"components/spots/userRoles/nsUserRoles.html",controller:["$rootScope","userRoleService","spotService",function(e,t,n){var o=this;o.userRoleService=t,o.userRoleService.loadRoles(),o.isAdmin=!1,function(){for(var t=0,r=e.user.user_roles.length;r>t;t++)if(e.user.user_roles[t].spot_id===n.spot.id&&"admin"===e.user.user_roles[t].role)return o.isAdmin=!0}()}],controllerAs:"rolesCtrl"}}angular.module("nsApp.spots").directive("nsUserRoles",e),e.$inject=["$rootScope","userRoleService","spotService"]}(),function(){function e(e,t){var n=e+"/spots/:spot_id/user_roles";return t(e+"/user_roles/:id",{id:"@id",spot_id:"@spot_id"},{index:{method:"GET",url:n,isArray:!0},create:{method:"POST",url:n},update:{method:"PUT"}})}angular.module("nsApp.spots").factory("UserRole",e),e.$inject=["BASE_API_URL","$resource"]}(),function(){function e(e,t,n,o){function r(){e.index({spot_id:t.spot.id}).$promise.then(function(t){c.roles=t.map(function(t){return new e(t)})})}function i(r){if(t.spot&&r){var i=n.defer();return c.pending=!0,e.create({user_id:r.id,spot_id:t.spot.id}).$promise.then(function(t){c.roles.push(new e(t)),o.pop("success","User added"),i.resolve(t)})["catch"](function(e){o.pop("error","Unable to add user"),i.reject(e)})["finally"](function(){c.pending=!1}),i.promise}}function s(e){e&&e.$update().then(function(e){o.pop("success","User updated")})["catch"](function(e){o.pop("error","Unable to update user")})}function a(e){e&&e.$delete().then(function(t){var n=c.roles.indexOf(e);return c.roles.splice(n,1),o.pop("success","User removed"),t})["catch"](function(e){console.error(e)})}var c={pending:!1,roles:[],role:null,loadRoles:r,create:i,update:s,destroy:a};return c}angular.module("nsApp.spots").factory("userRoleService",e),e.$inject=["UserRole","spotService","$q","toaster"]}(),function(){function e(e){return{restrict:"E",scope:{},bindToController:{spot:"="},template:"<ul class='ns-tags'><li ng-if='listCtrl.spot.price != 0'><span ng-repeat='price in listCtrl.prices track by $index' ng-class='{eat: listCtrl.spot.price > $index}'>$</span></li><li ng-repeat='ctg in listCtrl.categoryObjs' ng-class='ctg.sort'>{{ctg.name}}</li></ul>",controller:["Category",function(e){var t=this;t.prices=new Array(4),e.index().then(function(e){t.categoryObjs=e.filter(function(e){return t.spot.category_ids.indexOf(e.id)>-1})})}],controllerAs:"listCtrl"}}angular.module("nsApp").directive("nsTagList",e),e.$inject=["Category"]}(),function(){function e(e){var t=this;t.spot=e,t.today=Date.now(),t.placeholder=function(){var e="/";return t.spot.eat||t.spot.drink||t.spot.attend?(t.spot.eat&&(e+="e"),t.spot.drink&&(e+="d"),t.spot.attend&&(e+="a")):e+="a",e+=".png"}}angular.module("nsApp.spots").controller("viewSpot",e),e.$inject=["spot"]}(),function(){function e(){return function(e){if(!e.distance)return"";var t=Math.round(e.distance/2.5*60);return t>0&&30>t?t+2+"mins":""}}angular.module("nsApp.spots").filter("walkingTime",e)}(),function(){function e(e,t){function n(t){t.$valid&&e.update()["finally"](function(e){t.$setPristine()})}function o(n){n.$valid&&e.destroy().then(function(e){t.go("home")})}var r=this;e.setCurrentAccount(),r.userService=e,r.updateAccount=n,r.destroyAccount=o}angular.module("nsApp.users").controller("editAccount",e),e.$inject=["userService","$state"]}(),function(){function e(e,t){function n(n){n.$valid&&e.register().then(function(e){t.go("home")})}var o=this;o.userService=e,o.userService.account={dob:new Date,password:"",password_confirmation:""},o.createAccount=n}angular.module("nsApp.users").controller("newAccount",e),e.$inject=["userService","$state"]}(),function(){function e(e,t){function n(n){n.$valid&&e.requestPasswordReset().then(function(e){t.go("login")})}var o=this;o.userService=e,o.userService.account={},o.requestPasswordReset=n}angular.module("nsApp.users").controller("requestPasswordReset",e),e.$inject=["userService","$state"]}(),function(){function e(e,t){function n(n){n&&e.resetPassword().then(function(e){t.go("home")})}var o=this;o.userService=e,o.userService.account={},o.resetPassword=n}angular.module("nsApp.users").controller("resetPassword",e),e.$inject=["userService","$state"]}(),function(){function e(e,t){function n(){if(o.imgFile){var n=t.open({controller:"cropImageModal",controllerAs:"imgCtrl",templateUrl:"shared/images/cropImageModal.html",size:"md",resolve:{imgFile:function(){return o.imgFile}}});n.result.then(function(t){o.imgFile=null,e.upload(t)})}}var o=this;o.avatar=e,o.imgFile=null,o.openModal=n}angular.module("nsApp.users").controller("avatar",e),e.$inject=["Avatar","$uibModal"]}(),function(){function e(e,t,n,o,r){function i(t){return c.pending?void 0:(c.pending=!0,e.upload({url:a,method:"PUT",data:{avatar_data_uri:t}}).then(function(e){return r.pop("success","Avatar uploaded."),n.user.avatar=e.data.data.avatar,e.data})["catch"](function(e){r.pop("error","Unable to upload avatar.")})["finally"](function(){c.pending=!1}))}function s(){return c.pending?void 0:(c.pending=!0,o.put(a,{remove_avatar:!0}).then(function(e){return r.pop("success","Avatar removed."),n.user.avatar=null,e.data})["catch"](function(e){return r.pop("error","Unable to remove avatar."),e.data})["finally"](function(){c.pending=!1}))}var a=t.apiUrl()+t.getConfig().accountUpdatePath,c={pending:!1,upload:i,remove:s};return c}angular.module("nsApp.users").factory("Avatar",e),e.$inject=["Upload","$auth","$rootScope","$http","toaster"]}(),function(){function e(e,t){function n(n){return n.$invalid?void 0:e.login().then(function(e){t.go("home")})}var o=this;o.userService=e,o.submitLogin=n}angular.module("nsApp.users").controller("loginUser",e),e.$inject=["userService","$state"]}(),function(){function e(e,t){function n(){t.save().then(function(t){return e.close()})}function o(){return e.dismiss(null)}var r=this;r.specialService=t,r.save=n,r.cancel=o,r.minDate=new Date,r.maxDate=(new Date).setDate((new Date).getDate()+30)}angular.module("nsApp.spots").controller("featuredSpecialModal",e),e.$inject=["$uibModalInstance","featuredSpecialService"]}(),function(){function e(e,t,n,o){function r(n){if(!l.pending){l.pending=!0;var n=n||t.spot.id;e.featured({spot_id:n}).$promise.then(function(t){l.specials=t.map(function(t){return new e(t)})})["finally"](function(){l.pending=!1})}}function i(){return!l.pending&&l.special?l.special.id?a():s():void 0}function s(){var r=n.defer();return l.pending=!0,l.special.spot_id=t.spot.id,console.log(l.special),e.create(l.special).$promise.then(function(t){var n=new e(t);l.specials.push(n),l.special=null,o.pop("success","Special added"),r.resolve(t)})["catch"](function(e){o.pop("error","Unable to add special"),r.reject(e)})["finally"](function(){l.pending=!1}),r.promise}function a(){var t=n.defer();return l.pending=!0,l.special.$update().then(function(n){var r=l.specials.indexOf(l.special);l.specials[r]=new e(n),l.special=null,o.pop("success","Special updated"),t.resolve(n)})["catch"](function(e){o.pop("error","Unable to update special"),t.reject(e)})["finally"](function(){l.pending=!1}),t.promise}function c(){!l.pending&&l.special&&(l.pending=!0,l.special.$delete().then(function(e){var t=l.specials.indexOf(l.special);return l.specials.splice(t,1),l.special=null,o.pop("success","Special removed"),e})["catch"](function(e){console.error(e)})["finally"](function(){l.pending=!1}))}var l={pending:!1,specials:[],special:null,loadSpecials:r,save:i,destroy:c};return l}angular.module("nsApp.spots").factory("featuredSpecialService",e),e.$inject=["Special","spotService","$q","toaster"]}(),function(){function e(){return{restrict:"E",scope:{},bindToController:{spot:"="},controller:["featuredSpecialService",function(e){var t=this;t.featuredSpecialService=e,t.featuredSpecialService.loadSpecials(t.spot.id)}],controllerAs:"fSplsCtrl",templateUrl:"components/spots/specials/featured/nsFeaturedSpecialsList.html"}}angular.module("nsApp.spots").directive("nsFeaturedSpecialsList",e)}();
//# sourceMappingURL=data:application/json;base64,
